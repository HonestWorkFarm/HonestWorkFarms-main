{"ast":null,"code":"import _regeneratorRuntime from\"/home/mike/Documents/Work/repos/HonestWorkFarms-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/home/mike/Documents/Work/repos/HonestWorkFarms-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/home/mike/Documents/Work/repos/HonestWorkFarms-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import poolsConfig from'config/constants/pools';import sousChefABI from'config/abi/sousChef.json';import cakeABI from'config/abi/cake.json';import multicall from'utils/multicall';import BigNumber from'bignumber.js';var CHAIN_ID=process.env.REACT_APP_CHAIN_ID;export var fetchPoolsBlockLimits=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var cakePools,cakeStarts,cakeEnds;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:cakePools=poolsConfig;_context.next=3;return multicall(sousChefABI,cakePools.map(function(cakePool){return{address:cakePool.contractAddress[CHAIN_ID],name:'startBlock'};}));case 3:cakeStarts=_context.sent;_context.next=6;return multicall(sousChefABI,cakePools.map(function(cakePool){return{address:cakePool.contractAddress[CHAIN_ID],name:'bonusEndBlock'};}));case 6:cakeEnds=_context.sent;return _context.abrupt(\"return\",_toConsumableArray(cakePools.map(function(poolConfig,index){var startBlock=cakeStarts[index];var endBlock=cakeEnds[index];return{sousId:poolConfig.sousId,startBlock:new BigNumber(startBlock).toJSON(),endBlock:new BigNumber(endBlock).toJSON()};})));case 8:case\"end\":return _context.stop();}}},_callee);}));return function fetchPoolsBlockLimits(){return _ref.apply(this,arguments);};}();export var fetchPoolsTotalStaking=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var cakePools,cakePoolsTotalStaked;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:cakePools=poolsConfig;_context2.next=3;return multicall(cakeABI,cakePools.map(function(cakePool){return{address:cakePool.stakingTokenAddress[CHAIN_ID],name:'balanceOf',params:[cakePool.contractAddress[CHAIN_ID]]};}));case 3:cakePoolsTotalStaked=_context2.sent;return _context2.abrupt(\"return\",_toConsumableArray(cakePools.map(function(p,index){return{sousId:p.sousId,totalStaked:new BigNumber(cakePoolsTotalStaked[index]).toJSON()};})));case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchPoolsTotalStaking(){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/mike/Documents/Work/repos/HonestWorkFarms-main/src/state/pools/fetchPools.ts"],"names":["poolsConfig","sousChefABI","cakeABI","multicall","BigNumber","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchPoolsBlockLimits","cakePools","map","cakePool","address","contractAddress","name","cakeStarts","cakeEnds","poolConfig","index","startBlock","endBlock","sousId","toJSON","fetchPoolsTotalStaking","stakingTokenAddress","params","cakePoolsTotalStaked","p","totalStaked"],"mappings":"sgBAAA,MAAOA,CAAAA,WAAP,KAAwB,wBAAxB,CACA,MAAOC,CAAAA,WAAP,KAAwB,0BAAxB,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CAEA,GAAMC,CAAAA,QAAQ,CAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA7B,CAEA,MAAO,IAAMC,CAAAA,qBAAqB,0FAAG,qKAC7BC,SAD6B,CACjBV,WADiB,uBAEVG,CAAAA,SAAS,CAChCF,WADgC,CAEhCS,SAAS,CAACC,GAAV,CAAc,SAACC,QAAD,QAAe,CAC3BC,OAAO,CAAED,QAAQ,CAACE,eAAT,CAAyBT,QAAzB,CADkB,CAE3BU,IAAI,CAAE,YAFqB,CAAf,EAAd,CAFgC,CAFC,QAE7BC,UAF6B,qCASZb,CAAAA,SAAS,CAC9BF,WAD8B,CAE9BS,SAAS,CAACC,GAAV,CAAc,SAACC,QAAD,QAAe,CAC3BC,OAAO,CAAED,QAAQ,CAACE,eAAT,CAAyBT,QAAzB,CADkB,CAE3BU,IAAI,CAAE,eAFqB,CAAf,EAAd,CAF8B,CATG,QAS7BE,QAT6B,kEAkB9BP,SAAS,CAACC,GAAV,CAAc,SAACO,UAAD,CAAaC,KAAb,CAAuB,CACtC,GAAMC,CAAAA,UAAU,CAAGJ,UAAU,CAACG,KAAD,CAA7B,CACA,GAAME,CAAAA,QAAQ,CAAGJ,QAAQ,CAACE,KAAD,CAAzB,CACA,MAAO,CACLG,MAAM,CAAEJ,UAAU,CAACI,MADd,CAELF,UAAU,CAAE,GAAIhB,CAAAA,SAAJ,CAAcgB,UAAd,EAA0BG,MAA1B,EAFP,CAGLF,QAAQ,CAAE,GAAIjB,CAAAA,SAAJ,CAAciB,QAAd,EAAwBE,MAAxB,EAHL,CAAP,CAKD,CARE,CAlB8B,yDAAH,kBAArBd,CAAAA,qBAAqB,0CAA3B,CA8BP,MAAO,IAAMe,CAAAA,sBAAsB,2FAAG,2KAC9Bd,SAD8B,CAClBV,WADkB,wBAEDG,CAAAA,SAAS,CAC1CD,OAD0C,CAE1CQ,SAAS,CAACC,GAAV,CAAc,SAACC,QAAD,QAAe,CAC3BC,OAAO,CAAED,QAAQ,CAACa,mBAAT,CAA6BpB,QAA7B,CADkB,CAE3BU,IAAI,CAAE,WAFqB,CAG3BW,MAAM,CAAE,CAACd,QAAQ,CAACE,eAAT,CAAyBT,QAAzB,CAAD,CAHmB,CAAf,EAAd,CAF0C,CAFR,QAE9BsB,oBAF8B,oEAY/BjB,SAAS,CAACC,GAAV,CAAc,SAACiB,CAAD,CAAIT,KAAJ,QAAe,CAC9BG,MAAM,CAAEM,CAAC,CAACN,MADoB,CAE9BO,WAAW,CAAE,GAAIzB,CAAAA,SAAJ,CAAcuB,oBAAoB,CAACR,KAAD,CAAlC,EAA2CI,MAA3C,EAFiB,CAAf,EAAd,CAZ+B,2DAAH,kBAAtBC,CAAAA,sBAAsB,2CAA5B","sourcesContent":["import poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport cakeABI from 'config/abi/cake.json'\nimport multicall from 'utils/multicall'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchPoolsBlockLimits = async () => {\n  const cakePools = poolsConfig\n  const cakeStarts = await multicall(\n    sousChefABI,\n    cakePools.map((cakePool) => ({\n      address: cakePool.contractAddress[CHAIN_ID],\n      name: 'startBlock',\n    })),\n  )\n  const cakeEnds = await multicall(\n    sousChefABI,\n    cakePools.map((cakePool) => ({\n      address: cakePool.contractAddress[CHAIN_ID],\n      name: 'bonusEndBlock',\n    })),\n  )\n\n  return [\n    ...cakePools.map((poolConfig, index) => {\n      const startBlock = cakeStarts[index]\n      const endBlock = cakeEnds[index]\n      return {\n        sousId: poolConfig.sousId,\n        startBlock: new BigNumber(startBlock).toJSON(),\n        endBlock: new BigNumber(endBlock).toJSON(),\n      }\n    }),\n  ]\n}\n\nexport const fetchPoolsTotalStaking = async () => {\n  const cakePools = poolsConfig\n  const cakePoolsTotalStaked = await multicall(\n    cakeABI,\n    cakePools.map((cakePool) => ({\n      address: cakePool.stakingTokenAddress[CHAIN_ID],\n      name: 'balanceOf',\n      params: [cakePool.contractAddress[CHAIN_ID]],\n    })),\n  )\n\n  return [\n    ...cakePools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(cakePoolsTotalStaked[index]).toJSON(),\n    })),\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}